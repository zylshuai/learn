1. 10,15,20 不会相互影响,因为createMultiplier实际上创建了一个函数工厂,所生产的函数拥有独立的作用域
2. 
const createStandardGreeter1 = (prefix,suffix) => (text) => processText(text, prefix, suffix)
const createStandardGreeter = createStandardGreeter1('Hello,','!')
createStandardGreeter(name)
3.  改进点:  应该使用function函数,并在[Symbol.iterator]函数中创建临时变量来获取this.members
const team = {
  members: ["Alice", "Bob", "Charlie"],
  // 你的代码将写在这里
  [Symbol.iterator]: () => {
    let index = 0;

    return {
      next: () => {
        if(index < members.length){
            return {
            value: members[index++],
            done: false,
            };
        }else{
            return {
            value: members[index],
            done: true,
            };
        }
      },
    };
  },
};
4.    改进点:这里必须绑定function函数才能拿到this.prefix
问题在于箭头函数中不存在arguments关键字.同时箭头函数中的this取决于函数运行时的作用域,所以拿不到this.prefix
log:(...args)=>{
    console.log(prefix, ...args); 
}